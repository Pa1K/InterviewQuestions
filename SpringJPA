CrudRepository
PagingAndSortingRepository
JpaRepository

fetching the relevant data from an entity table based on offsets -- PagingAndSortingRepository

---------
CrudRepository -
<S extends T> S save(S entity);
<S extends T> Iterable<S> saveAll(Iterable<S> entities);

void delete(T entity);
void deleteById(ID id);
void deleteAllById(Iterable<? extends ID> ids);
void deleteAll(Iterable<? extends T> entities);
void deleteAll();

boolean existsById(ID id);
Optional<T> findById(ID id);
Iterable<T> findAll();
Iterable<T> findAllById(Iterable<ID> ids);

long count();
-------------------
@Repository preference over @Component,@Service for DAO classes
What will happen if you use @Service over a Dao/Repository?

Root Exception class for all dao specific exception in spring is DataAccessException
DataAccessException extends NestedRuntimeException i.e DataAccessExceptions are unchecked exceptions(Runtime Exceptions)
Spring JDBC takes care of DataAccessException
Spring JPA or other DB frameworks have to use @Repository over DAO classes, for DataAccessException

https://github.com/Pa1K/RepositoryAnnotation/tree/master/RepositoryAnnonation
https://www.youtube.com/watch?v=CUQWZHjuq-w

In your DAO methods, you neither need to surround the code with a try/catch block nor declare throwing an exception in the method signature - true
This is because DataAccessException (and therefore its subclasses, including DuplicateKeyException) is an unchecked exception that you are not forced to catch.
--------------
Each entity class to be persisted by an ORM framework, a default constructor with no argument is required. - true
For each entity class, you must define an identifier property to uniquely identify an entity.
https://docs.oracle.com/javaee/6/tutorial/doc/bnbqa.html#bnbqb
----------
https://www.baeldung.com/jpa-composite-primary-keys

In JPA, we have two options to define the composite keys: the @IdClass and @EmbeddedId annotations.
In order to define the composite primary keys, we should follow some rules:
The composite primary key class must be public.
It must have a no-arg constructor.
It must define the equals() and hashCode() methods.
It must be Serializable.

Caused by: org.hibernate.MappingException: Composite-id class must implement Serializable: com.pavan.relations.model.Account
added @IdClass(value = AccountId.class) on top of Account class

Caused by: org.hibernate.MappingException: Composite-id class must implement Serializable: com.pavan.relations.model.primary.AccountId
public class AccountId implements Serializable
resolve issue


for entity class:
@IdClass(AccountId.class)
@Id
@Id


for key class:
@Embeddable
for entity class:
@EmbeddedId
------
OneToOne mapping -

private Address address;
Caused by: org.hibernate.MappingException: Could not determine type for: com.pavan.relations.model.Address, at table: users, 
for columns: [org.hibernate.mapping.Column(address)]
@OneToOne private Address address;
resolves exception and address_id Column gets created in DB

Caused by: org.hibernate.TransientPropertyValueException: 
object references an unsaved transient instance - save the transient instance before flushing : 
com.pavan.relations.model.User.address -> com.pavan.relations.model.Address

By adding cascade = CascadeType.ALL to @OneToOne we can resolve the issue

User -
@OneToOne(cascade = CascadeType.ALL)
@JoinColumn(name = "address_id", referencedColumnName = "id")
private Address address;

Address -
@OneToOne(mappedBy = "address")
private User user;

-------
hibernate.jdbc.fetch_size vs hibernate.jdbc.batch_size
Both of these options set properties within the JDBC driver. 
In the first case, 
hibernate.jdbc.fetch_size sets the statement's fetch size within the JDBC driver, 
that is the number of rows fetched when there is more than a one row result on select statements.

In the second case, 
hibernate.jdbc.batch_size determines the number of updates (inserts, updates and deletes) that are sent to the database at one time for execution. 
This parameter is necessary to do batch inserts, but must be coupled with the ordered inserts parameter and the JDBC driver's capability to rewrite 
the inserts into a batch insert statement.
------
which of the following is used for joining tables in collection mapping?
@JoinTable or @JoinCoumns
-------
https://www.tutorialspoint.com/hibernate/hibernate_caching.htm
------
  HIBERNATE
#Hibernate and JPA Contextual Sessions
What is addScalar() used for in the following Hibernate code?
Double max = (Double) sess.createSQLQuery("select max(b.weight) as maxWeight from books b").addScalar("maxWeight",HIBERNATE.DOUBLE).uniqueResult();
-------
In hibernate, which of the following exceptions will be thrown by the following code:
@Id
@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="StudentSeq")
@Column(name="admission_no", updatable = false, nullable = false)
private Long admission_no;
1. org.hibernate.AnnotationException: Unknown Id.generator
2. QuerySyntaxException: Table is not mapped
3. OptimisticLockException
4. LazyInitializationException

Ans: 1. org.hibernate.AnnotationException: Unknown Id.generator
https://www.overops.com/blog/5-common-hibernate-exceptions-and-how-to-fix-them/
-----------------
