CrudRepository
PagingAndSortingRepository
JpaRepository

fetching the relevant data from an entity table based on offsets -- PagingAndSortingRepository
-------------------
https://www.baeldung.com/jpa-composite-primary-keys

In JPA, we have two options to define the composite keys: the @IdClass and @EmbeddedId annotations.
In order to define the composite primary keys, we should follow some rules:
The composite primary key class must be public.
It must have a no-arg constructor.
It must define the equals() and hashCode() methods.
It must be Serializable.

for entity class:
@IdClass(AccountId.class)
@Id
@Id


for key class:
@Embeddable
for entity class:
@EmbeddedId
------
hibernate.jdbc.fetch_size vs hibernate.jdbc.batch_size
Both of these options set properties within the JDBC driver. 
In the first case, 
hibernate.jdbc.fetch_size sets the statement's fetch size within the JDBC driver, 
that is the number of rows fetched when there is more than a one row result on select statements.

In the second case, 
hibernate.jdbc.batch_size determines the number of updates (inserts, updates and deletes) that are sent to the database at one time for execution. 
This parameter is necessary to do batch inserts, but must be coupled with the ordered inserts parameter and the JDBC driver's capability to rewrite 
the inserts into a batch insert statement.
------
which of the following is used for joining tables in collection mapping?
@JoinTable or @JoinCoumns
-------
https://www.tutorialspoint.com/hibernate/hibernate_caching.htm
