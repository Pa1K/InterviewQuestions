JAX RS - Java API for RESTful WebServices

------
WebSocket vs WebServies
one stark difference between WebSocket and HTTP is that 
WebSocket works on a persistent TCP connection while HTTP creates a new TCP connection for every request.
as part of HTTP/1.1, persistent connections were introduced to alleviate this shortcoming of HTTP.

With WebSocket, working over persistent TCP communication, it's possible for server and client both to send data independent of each other, 
and in fact, to many communicating parties! This is referred to as bi-directional communication.

For the bulk of the scenario 
where occasional communication is required with the server like getting the record of an employee, it's still sensible to use REST service over HTTP/S. 
But for newer client-side applications like a stock-price application which requires real-time updates from the server, it's much convenient to leverage WebSocket.

WebSocket is more suitable for cases where a push-based and real-time communication defines the requirement more appropriately. 
Additionally, WebSocket works well for scenarios where a message needs to be pushed to multiple clients simultaneously.

Ref:
https://www.baeldung.com/rest-vs-websockets
-------
disadvantages of REST API
https://www.journaldev.com/9193/web-services-interview-questions-soap-restful#what-is-web-service
-----------


annonate method with @Path to get the relative path if the resource class/method

@MatrixParam, 
@CookieParam 
@FormParam
@DefaultValue

@Context

-------
URI in RESTful web service 
<protocol>://<service-name>/<ResourceType>/<ResourceID>
https://www.tutorialspoint.com/restful/restful_addressing.htm
------
HTTP METHODS:
GET - read - fetch data from the server
POST - create
PUT - update/modify entire record
PATCH - to update/modify part of the record 
DELETE - delete

GET /users/{id}

---------
idempotent?
https://restfulapi.net/idempotent-rest-apis/
The ability to execute the same API request over and over again without changing the resouce's state is an example of idempotency.
In the context of REST APIs, when making multiple identical requests has the same effect as making a single request – then that REST API is called idempotent.
An idempotent HTTP method is an HTTP method that can be called many times without different outcomes. It would not matter if the method is called only once, or ten times over. The result should be the same.
Idempotence essentially means that the result of a successfully performed request is independent of the number of times it is executed. For example, in arithmetic, adding zero to a number is an idempotent operation.

If you follow REST principles in designing API, 
you will have automatically idempotent REST APIs for GET, PUT, DELETE, HEAD, OPTIONS and TRACE HTTP methods. 
Only POST APIs will not be idempotent.

when you invoke the same POST request N times, you will have N new resources on the server. So, POST is not idempotent.
GET, HEAD, OPTIONS and TRACE methods NEVER change the resource state on server
So invoking multiple requests will not have any write operation on server, so GET, HEAD, OPTIONS and TRACE are idempotent.

If you invoke a PUT API N times, the very first request will update the resource; then rest N-1 requests will just overwrite the same resource state again and again – effectively not changing anything. Hence, PUT is idempotent.
When you invoke N similar DELETE requests, first request will delete the resource and response will be 200 (OK) or 204 (No Content). Other N-1 requests will return 404 (Not Found). Clearly, the response is different from first request, but there is no change of state for any resource on server side because original resource is already deleted. So, DELETE is idempotent.
-------


HTTP call
method path protocol

HTTP Header fields -
General:
Request URL,
Request Method,
Status Code,
Remote Address,
Referrer Policy

Response:
Server,
Set-Cookie
Content-Type
Content-Length
Date

Request:
Cookies
Accept-xxx
Content-Type
Content-Length
Authorization
User-Agent
Referrer

HTTP Status Codes:
1xx - informational
2xx - succeaa
3xx - Redirect
4xx - Client Error
5xx - Server Error

200 - OK
201 - OK created
301 - Moved to new URL
304 - Not modified (Cached version)
400 - Bad Request
401 - unauthorised
404 - not found
409 Conflict
The HTTP 409 Conflict response status code indicates a request conflict with current state of the target resource.

500 - internal server error

https://www.instantwebtools.net/fake-rest-api
can be used to test diff HTTP methods



https://www.tutorialspoint.com/restful/pdf/restful_mock_test_ii.pdf
