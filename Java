1. Why String is an immutable class
2. What is immutable class, how to create custom immutable class
3. What will happen if we clone immutable class
4. Talk about memory allocation for different wrapper classes
5. Abstraction,  encapsulation and its significance with real time examples
6. Class loaders in java
7. SOLID principles
8. What is generics
9. Generics
10. When u hv hashtable why u need to go to synchronized hashmap
11. Java 8 features
12. What is lambda expression
13. How do u create custom function interface
14. One problem from stream api
15. What is the function interface used in filter and map
16. Predicate,  supplier  , consumer and function
17. What is flat map
---------
SOLID principles -
Single Responsibility Priciple
Open Closed principle
Liskov Substitution principle
Interface Segregation principle
Dependency Inversion principle

Single Responsibility Principle - A class should have one and only one reason to change
Open Closed Principle - Software entities should be open for extension but closed for modification
Liskov Substitution Principle - Subtypes must be substitutable for their base types
Interface Segregation Principle - The Dependency of one class to another one should depend on the smallest possible Interface.
Dependency Inversion Principle - Depend upon abstractions(Interfaces) not upon concrete classes

Ref: https://www.youtube.com/watch?v=yxf2spbpTSw&ab_channel=in28minutesCloud%2CDevOpsandMicroservices
---------
String vs StringBuilder vs StringBuffer
https://www.javatpoint.com/difference-between-stringbuffer-and-stringbuilder

to split the string based on multiple delims then use regex pattern
String delims = "[ !,?._'@]+";
String[] tokens = str.split(delims);
        
---------
Java Stack and Heap: Java Memory Allocation Tutorial
https://www.guru99.com/java-stack-heap.html
If reference is not presnet for the object then it's available for garbage collection.

https://stackoverflow.com/questions/18406703/when-will-a-string-be-garbage-collected-in-java

JVM vs JDK vs JRE
where in ur file system does java compiler i.e javac exists? Is there any physical existence? - at jdk/bin/, javac is present 
Class Loader and its types
What are defined class paths for different class loaders
Class loader belong to JRE or JDK - belongs to JRE
What is byte code verifier - byte code verifier verifies byte code is proper or corrputed
What is method or class area - class strcture is maintained here
What is heap, stack - heap for objects and stack for class variables
Why PC registers are imp and wt it holds? - pc registers contain address of JVM current instruction
What is native method stack - for native methods 
What is JIT, why JIT -   as Interpreter takes times, JIT introduced to increase efficiency, converts set of repeated lines to machine code 
What is execution engine? and what are its Components? - to execute machine code, JIT,Interpreter,GC
What is exception proprgration stack. How stack is used during exception propagation?
Show exception propagation stack via Code Example

JavaCode --> compiler(javac) converts Java file/Code to --> class file / byte code
JDK =  JVM + JRE
JRE contains JVM
JVM contains execution engines

ClassLoader is part of JRE 
ClassLoaders - to load .class file into the main memory 
before loading to Main memory, byte code verifier verifies byte code is proper or corrputed.
ClassLoaders -
1. Bootstrap ClassLoader - jre/lib/rt.jar
2. Extension  ClassLoader - JAVA_HOME/lib/ext
3. System/Application ClassLoader - our classpath
if class is not present in all 3 of ClassLoaders then we get ClassNotFoundException.

JVM is platform dependent
JVM/Main memory -
1. class/method area
2. heap
3. stack
4. pc registers
5. native memory 

pc registers contain address of JVM current instruction

Excecution Engine - to execute machine code
1. JIT(Just-InTime Compiler) - as Interpreter takes times, JIT introduced to increase efficiency, converts set of repeated lines to machine code 
2. Interpreter - reads byte code line by line and converts to machine code 
3. GC - always runs on heap memory, cleans up heap memory


Exception Propagation -
An exception is first thrown from the top of the stack and if it is not caught, it drops down the call stack to the previous method,
If not caught here, the exception again drops down to the previous method, 
and so on until they are caught or until they reach the very bottom of the call stack.
This is called exception propagation.


Ref:
https://www.youtube.com/watch?v=ZI6Et1bVen0
---------
https://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
Pattern.compile helps to find whether regex valid or not
if pattern is not valid we will get PatternSyntaxException.
---------
can a class be private?

We can not declare top level class as private. 
Java allows only public and default modifier for top level classes in java.
Inner classes can be private.

if we add private to class, we will get the following compile error
Illegal modifier for the class PrivateClass; only public, abstract & final are permitted

-------
final vs finally vs finalize
The finalize() method of Object class is a method that the Garbage Collector always calls just before the deletion/destroying the object which is eligible for Garbage Collection, 
so as to perform clean-up activity. Clean-up activity means closing the resources associated with that object like Database Connection, Network Connection or 
we can say resource de-allocation. Remember it is not a reserved keyword. Once the finalize method completes immediately Garbage Collector destroy that object.

https://www.geeksforgeeks.org/finalize-method-in-java-and-how-to-override-it/
https://www.javatpoint.com/difference-between-final-finally-and-finalize

@Deprecated(since="9")
protected void finalize() throws Throwable { }
-------------
https://www.javatpoint.com/static-keyword-in-java

https://stackoverflow.com/questions/10291949/are-static-methods-inherited-in-java
static methods are class methods.

A.display() and B.display() will call method of their respective classes.
A is parent, B is child.
-------
we can pass single character to as int argument, and if print we wll get ascii value
----
#inheritance
Parent parent = new Child();
or
Child child = new Child();
then if the method is available in child then child method is considered
if method is not present in child, but present in parent, then we call parent method.

Child child2 = (Child) new Parent(); 
Exception in thread "main" 
java.lang.ClassCastException: class com.pavan.inheritance.Parent cannot be cast to class com.pavan.inheritance.Child 
(com.pavan.inheritance.Parent and com.pavan.inheritance.Child are in unnamed module of loader 'app')
casting can't be done to child from parent.

child object can have reference of both parent and it's class
Parent class should have it's own reference, with child refernce gives error
		
If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but it can declare unchecked exception.
If the superclass method declares an exception, subclass overridden method can declare same, subclass exception or no exception but cannot declare parent exception.
https://www.javatpoint.com/exception-handling-with-method-overriding
-----------

#transient keyword
Serialization is a process by which the object's state is saved by JVM and during deserialization, it’s recovered by JVM. 
During Serialization all property of object gets saved except static and transient.
In one word transient keyword is used in the serialization process to prevent any variable from being serialized
While marking any property transient it's worth noting to provide it a default value during deserialization otherwise deserialized object is not properly used.
any variable whose value can be calculated from other variables doesn't require to be saved, so make it transient.
1) A transient keyword can only be applied to fields or member variables. Applying it to the method or local variable is a compilation error.
2) Another important point is that you can declare a variable static and transient at the same time and the java compiler doesn't complain but doing that doesn't make any sense because the transient is to instruct "do not save this field" and static variables are not saved anyway during serialization.
3) In a similar way you can apply transient and final keywords together to a variable compiler that will not complain but you will face another problem of reinitializing a final variable during deserialization.
the transient keyword is used during serialization of Java object
4) A transient variable in java is not persisted or saved when an object gets serialized.


Ref:
https://javarevisited.blogspot.com/2011/09/transient-keyword-variable-in-java.html#axzz75arPQxam
https://www.geeksforgeeks.org/transient-keyword-java/
-------------
Marker Interface:
https://javaconceptoftheday.com/marker-interface-java/
https://www.baeldung.com/java-marker-interfaces
----------
serialisation in java
serialization -
Classes that are eligible for serialization need to implement a special marker interface Serializable.

The most important method in ObjectOutputStream is:
public final void writeObject(Object o) throws IOException;
Which takes a serializable object and converts it into a sequence (stream) of bytes. 

Similarly, the most important method in ObjectInputStream is:
public final Object readObject() 
  throws IOException, ClassNotFoundException;
Which can read a stream of bytes and convert it back into a Java object. This can then be cast back to the original object.

static fields belong to a class, and are not serialized
we can use the keyword transient to ignore class fields during serialization

NotSerializableException

InvalidClassException

Ref: 
https://www.baeldung.com/java-serialization
https://www.geeksforgeeks.org/serialization-in-java/


what are marker interfaces in java and what marker interface mean?
a marker interface has no data member and method
It is used to “mark” java classes so that objects of these classes may get certain capability. 
Other examples of marker interfaces are:- Cloneable and Remote.
-----------
By design, 
all the collection classes in java.util package are fail fast
where as collection classes in java.util.concurrent are fail safe

Fail-fast iterators throw ConcurrentModificationException where as
fail-safe iterator never throws ConcurrentModificationException

below are the concurrent classes introduced in java 5 within java.util.concurrent package
1. CountDownLatch
2. CyclicBarrier
3. CopyOnWriteArrayList
4. ConcurrentHashMap
5. BlockingQueue
----------
Initializing a List in Java

The Java.util.List is a child interface of Collection
It is an ordered collection of objects in which duplicate values can be stored. 
Since List preserves the insertion order, it allows positional access and insertion of elements. 
List Interface is implemented by ArrayList, LinkedList, Vector and Stack classes.

1. list.add();
2. Double Brace Initialisation
List<Integer> list=new ArrayList<Integer>(){{
                        add(1);
                        add(2);
                        add(3);
                          }};
3.Arrays.asList()
List<Integer> list = Arrays.asList(1, 2, 3);
Arrays.asList() creates an immutable list from an array.

4. Creating Mutable List
List<Integer> list=new ArrayList<>(Arrays.asList(1, 2, 3));

5. Using Collections.addAll()
List<Integer> list = Collections.EMPTY_LIST;
Collections.addAll(list = new ArrayList<Integer>(), 1, 2, 3, 4);

6. Using Collections.unmodifiableList()
List<Integer> list = Collections.unmodifiableList(Arrays.asList(1, 2, 3));
   
7. Using Collections.singletonList()     
Collections.singletonList() returns an immutable list consisting of one element only.
List<Integer> list = Collections.singletonList(2);

8.using stream
1.  List<Integer> list = Stream.of(1, 2, 3).collect(Collectors.toList());
2.  List<Integer> list = Stream.of(1, 2, 3).collect(Collectors.toCollection(ArrayList::new));
3.  List<Integer> list  = Stream.of(1, 2, 3, 4).collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));

9. Using Java 9 List.of()
List<Integer> unmodifiableList = List.of(1, 2, 3);

Ref:
https://www.geeksforgeeks.org/initializing-a-list-in-java/
---------------
HashMap
remove(Object key) - Removes the mapping for the specified key from this map if present.
clear() - Removes all of the mappings from this map, The map will be empty after this call returns.
To delete all pairs of keys and values in a given HashMap,
The java.util.HashMap.clear() method in Java is used to clear and remove all of the elements or mappings from a specified HashMap.
https://www.geeksforgeeks.org/hashmap-clear-method-in-java/
-----------
HashMap vs SynchronizedMap vs HashTable vs ConcurrentHashMap

HashMap
Not thread-safe
Can have one null key and multiple null values

SynchronizedMap
thread-safe
Slow performance
null key and multiple null values are allowed

HashTable
thread-safe
Slow performance
null key-and-values are not allowed

ConcurrentHashMap
thread-safe
fast performance
null key-and-values are not allowed
Map is divieded into 16 segments
when we are doing write operation, only that particular thread is locked
so we can write to another segement, which results in faster response bcz of less waiting time.
incase of read, no lock. any number of threads can read.

HashMap Vs ConcurrentHashMap
HashMap is the Class which is under Traditional Collection 
ConcurrentHashMap is a Class which is under Concurrent Collections

HashMap is non-Synchronized in nature i.e. HashMap is not Thread-safe whereas ConcurrentHashMap is Thread-safe in nature.

HashMap performance is relatively high because it is non-synchronized in nature and any number of threads can perform simultaneously. 
But ConcurrentHashMap performance is low sometimes because sometimes Threads are required to wait on ConcurrentHashMap.

While one thread is Iterating the HashMap object, if other thread try to add/modify the contents of Object then we will get Run-time exception saying ConcurrentModificationException.
Whereas In ConcurrentHashMap we wont get any exception while performing any modification at the time of Iteration.


Ref:
https://youtu.be/UwurUtvil7w
https://www.geeksforgeeks.org/difference-hashmap-concurrenthashmap/
-----------
Why we can't handle errors in java?

when Error caught, program execution continues
if we didn't caught error, program execution gets stopped

Since the java.lang.Error class in Java doesn't inherit from java.lang.Exception, 
we must declare the Error base class – or the specific Error subclass we'd like to capture – in the catch statement in order to catch it.

Please note that the Java Virtual Machine throws errors to indicate severe problems from which it can't recover, 
such as lack of memory and stack overflows, among others. 
Thus, we must have a very, very good reason to catch an error!

Ref: https://www.baeldung.com/java-error-catch


java.lang.Object
	java.lang.Throwable
		java.lang.Error
		java.lang.Exception

Exception - we can handle
Error
NoSuchMethodError
OutOfMemoryError
ClassDefinitionNotFoundError

Error - does stop the execution of the Program


Q) What is an exception?
The exception is an abnormal condition that occurs during the execution of a program and disrupts the normal flow of the program. 
If not handled properly it can cause the program to terminate abruptly.

Q) How do we handle exceptions in Java
Try
Encloses set of statements which can throw exception hence are required to be monitored.

Catch
When exception occur, this block catches that exception and work accordingly to handle it or to throw it as required.

Finally
This block gets executed always regardless of exception occurrence. Hence clean up is done here. 

Q) Difference between Exception VS Error
Exception
We can recover from exception using try catch block or using throw
Compiler will have knowledge about checked Exceptions hence Compiler will force you to use try-catch blocks
Exceptions are related to application
Exceptions include both checked as well as unchecked type.
Exceptions in java are of type java.lang.Exception.

Error
Recovering from Error is not possible
Compiler will not have any knowledge about unchecked exceptions and  Errors
Errors are related to environment where  application is running 
All errors in java are unchecked type
Errors in java are of type java.lang.Error.

Q) Can we write only try block without catch and finally blocks?
No. either catch or finally is must.

if no  then what error will come?
Answer : compile time error saying “insert finally to complete try statement” like this:

Q) Can we write any other statements between try catch or finally block?
No. Try must be followed directly by either catch or finally.

Q) Does remaining statements in try block executes after exception occurs.
No. if exception occurs at a particular point in try block 
then all statements after that statement where exception is occurred will not be execute 
and the flow goes directly to either catch block if there is any or else program terminates. 
Hence we need finally block to do all clean up like closing files or removing locks.

Q) What Is the Difference Between Throw and Throws Keywords in Exception Handling in java?.
Throw 
Java throw keyword is used to explicitly throw an exception.
Checked exception cannot be propagated using throw only.
Throw is used within the method.
You cannot throw multiple exceptions.

Throws
Java throws keyword is used to 
declare an exception.
Checked exception can be propagated with throws.
Throws is used with the method signature.
You can declare multiple exceptions.

Q) What Happens When an Exception Is Thrown by the Main Method?
When an exception is thrown by main() method, Java Runtime terminates the program and prints the exception message and the stack trace in-system console.

Q) What do you understand by unreachable catch block error.
This error comes when you keep super classes first and sub classes later. 
Like here We kept Exception which is parent of NullPointer Exception first.
Hence the order of catch blocks must be from most specific to most general ones. 

Ref:
https://www.youtube.com/watch?v=gXctfxRV-gY



 	       ---> Throwable <--- 
              |    (checked)     |
              |                  |
              |                  |
      ---> Exception           Error
      |    (checked)        (unchecked)
      |
RuntimeException
  (unchecked)
  
There are three main categories of exceptional conditions:
Checked exceptions
Unchecked exceptions / Runtime exceptions
Errors
Runtime and unchecked exceptions refer to the same thing. We can often use them interchangeably. 

Checked exceptions are exceptions that the Java compiler requires us to handle. We have to either declaratively throw the exception up the call stack, or we have to handle it ourselves. 
A couple of examples of checked exceptions are IOException and ServletException.

Unchecked exceptions are exceptions that the Java compiler does not require us to handle.
Simply put, if we create an exception that extends RuntimeException, it will be unchecked; otherwise, it will be checked.

a situational error (checked) and a usage error (unchecked).
Some examples of unchecked exceptions are NullPointerException, IllegalArgumentException, and SecurityException.

Errors represent serious and usually irrecoverable conditions like a library incompatibility, infinite recursion, or memory leaks.
And even though they don't extend RuntimeException, they are also unchecked.
In most cases, it'd be weird for us to handle, instantiate or extend Errors. Usually, we want these to propagate all the way up.
A couple of examples of errors are a StackOverflowError and OutOfMemoryError.


Ref:
https://www.baeldung.com/java-exceptions
---------
Arrays.asList()
List.of()

distinct ()

collect(Collecters.toList())

For custom classes, implement equals method for the variable which we want distinct.

Collections.singletonList()


----
Why String is immutable?
-------
interface vs abstract class
interface A {

}



abstract class A {

}

all interface methods are by default -  public abstract
abstract methods doesn't have a body

abstract class contains abstract, concrete methods

multiple inheritance can be achieved by Inheritance
same can't be achieved by abstract class

variables -
interface : by default, public static final  and intialisation of variables is mandatory.
abstract class: no restrictions on variables and on intialisation of variables

constructor -
interface - can't have a constructor
abstract class - can have a constructor
can't create an object for both interface and abstract as methods are not defined 

Ref:
https://www.youtube.com/watch?v=Ud0zfImgbYw
-------
How hashmap works?
hashcode collision

Map Interface
HashMap class

Array of buckets,
each bucket is a node/linkedlist
16 default bucket size

hashMap.put(key,value)
hashCode of key is calcualted
hashCode helps to find index/bucket

if hashCode is bigger number then lot of space goes array allocation
instead of that we do modular operation on hashCode

after index is calculated it's stored in that index related node/bucket
each node is a linkedlist
each node stores the following values
key, value, hashCode, next

node = hashCode | key | value | null

hashMap.put(key2,value2)
calculated hashCode of key2
using hashCode, index is calculated

if two keys return same hashCode, then it's hashCollision
then another node is created in the linkedlist where already one node is present


hashCode | key | value | points to next node -->  hashCode | key2 | value2 | null

in map, we can enter null as key.
when ever key is null, it goes to 0 index


Map<String,Integer> map = new HashMap<>();
map.put("aaa",1);

map has size, table
default size - 16
table has array of buckets
table = HashMap$Node<K,V>
$ signifies Node is innerClass of HashMap

String str1 = "FB";
String str2 = "Ea";
str1, str2 return same hashCode

if two keys return same hashCode, then it's hashCollision
str1 is stored in first node, str2 in second node of same linkedlist


#During duplicate key
latest value gets updated

#During null key
when ever key is null, it goes to 0 index

loadFactor, threshold 
default loadFactor=0.75
when map is 75% full, table size will be doubled

how do we know map is 75% full, we come to know by threshold
threshold = loadFactor * size
default threshold = 0.75 * 16 = 12

when map crosses threshold, table size will be doubled


# get operation
hashCode of key is compared
then equals() method to compare key
if key doesn't match goes to next node of the linkedList and does same
once key is matched, we will get the value of the key  

Ref:
https://www.youtube.com/watch?v=CojCE-ojdGY
https://www.youtube.com/watch?v=fSjxhOYPBRI
https://www.youtube.com/watch?v=AVSGJHrrLpE
----------

equals and hashcode

List vs Set

ArrayList Internals

Failfast vs Failsafe collections
failsafe consumes more memory as it creates a copy

ArrayList<String> namesList = new ArrayList<>();
List<String> listofNames = Arrays.asList("pavan","bhavani","kumar","kari");
namesList.addAll(listofNames);
for(String name : namesList ){
System.out.println(name);
namesList.remove(2); // throws java.util.ConcurrentModificationException
}

Iterator<String> nameIterator = namesList.iterator();
while(nameIterator.hasNext()){
	String currName = nameIterator.next();
	if(currName.equals("pavan")){
		nameIterator.remove();
		System.out.println();
	}
}



The asList() method of java.util.Arrays class is used to return a fixed-size list backed by the specified array. 
public static List asList(T... a)


new CopyOnWriteArrayList<>();
then we can add to the list without java.util.ConcurrentModificationException

Singleton design pattern
GOF Singleton vs Spring Singleton

How implement singleton design pattern in java


Factory Design Pattern
------
stream api, complex methods like grouping by
immutable class
hashmap customer key object
-------

#multi Thread
There is no init() method in the Thread class.
The start() method causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread.
The run() method of a thread is like the main() method to an application. Starting the thread causes the object's run method to be called in that separately executing thread.
The resume() method is deprecated. It resumes a suspended thread.
The methods isInterrupted() and interrupt() are instance methods of Thread.
sleep() and yield() are static methods of Thread.
synchronized is a keyword and the synchronized() construct is part of the Java language.
The stop() method is deprecated. It forces the thread to stop executing.

The Object class defines these thread-specific methods.
wait(), notify(), notifyAll()


wait() always causes the current thread to go into the object's wait pool.
sleep() will always pause the currently running thread for at least the duration specified in the sleep argument (unless an interrupted exception is thrown).
assuming that the thread you're calling join() on is alive, the thread calling join() will immediately block until the thread you're calling join() on is no longer alive.
The yield() method is not guaranteed to cause a thread to leave the running state, although if there are runnable threads of the same priority as the currently running thread, 
then the current thread will probably leave the running state.


notify() - wakes up a single thread that is waiting on this object's monitor.

valid constructors
Thread() 
Thread(Runnable r, String name), 
Thread(ThreadGroup g, Runnable r )

X run = new X(); 
Thread t = new Thread(run); 
t.start();
