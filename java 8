New Features -
Default methods in the interface
Static methods in the interface
Stream API
Data and time API
Lambda Expression
Functional Interface
Optional
Method references
Nashorn, JavaScript Engine

Adv -
compact code (less boiler plate code)
More readable and resusable code
more testable code
parallel
------
Java 7 -
String literals in switch statements
Diamond operator in Collection and Generic instance creation - Generics are used to make collections type-safe.
Handling multiple exceptions with a single catch block
Try with resources block - Automatic Resource Management (ARM).
---------
https://www.javatpoint.com/difference-between-comparable-and-comparator
-------------
8.22 Interface in Java 8 Default , Static Methods | New features

Default Methods -
Interface in java 8 can have defined Methods.
defined methods need to have "default" or static.

when we implement an interface, then we need to implement unimplemented methods of the interface
so whenever a new method is added in interface, all implementing classes has to make implement unimplemented methods of the interface
to overcome this we can default methods in the interface

Is it necessary to override default methods ?
we can override the default methods, if default methods implementation is not sufficient.

Is default keyword one of the access modifier?
default is not the access modifier like public, private or protected.
For default access modifier we don't use any keyword.

default keyword was only used in classes till 1.8 version for switch case only 
but never in interface

Can you use hashCode() default implementation in interface?
You can't give your default implementation of hashCode() in interface for all implementing classes to use.
because A default method cannot override a method from java.lang.Object and will get compile time error.
All implementing classes by default has access to all methods of object class.
If we define any method in Interface which is present in Object class , it will give error.

How default methods in interface cope up with Diamond problem?
if a class is implementing two interfaces , which have a method defined in both interfaces
then we need to define that method in class, to avoid diamond problem
or InterfaceName.super.method();

if a class is implementing one interface, which have a defined method
then we dont need to define that method in the class, we can use the method defined in the Interface

if a class is extending class'B' and implementing two interfaces,
parent class and two interfaces have same defined method
then parent class method takes precedence over Interface methods as per "Third Rules in Java".


Default methods in Interface -
forEach() is a default method in the List interface whose inclusion does not force the existing implementations like ArrayList to be modified.
Default method in interface is useful if we don't want override methods defined in interface in the implementing class.

The major reason for presenting default methods was to improve the Collections API to have a support for lambda expressions.

The following methods are added as default methods in Java SE 8:
Class/Interface	New Methods
Map				getOrDefault, forEach, compute, computeIfAbsent, computeIfPresent, merge, putIfAbsent, remove, replace, replaceAll
Iterable		forEach, spliterator
Iterator		forEachRemaining
Collection		removeIf, stream, parallelStream
List			replaceAll, sort
BitSet			stream

Default Method Definition in Interface | Java 8

ForEach Method in Java 8

External Loops
Internal Loops - Java 8

External Loops -
List<Integer> l = Arrays.asList(4,5,67,8);
for(int i=0;i<l.size();i++){
	System.out.printl(l.get(i));
}

for(int i : l){
sop(i);
}

Internal Loops -
l.forEach(i -> sop(i)); //ForEach //Consumer Interface

internal loops are useful incase of larger data sets 
as forEach is a method with in collection


Static Methods -
Interfaces in Java 8 can have static methods and no need to mention "default" access specifier.

Why static methods were introduced in java8?
you can call static methods with just interface name. no need to create a class and then it's object.
we can call that method in another class using <InterfaceName>.<MethodName>().

Static methods in interfaces help to provide utility methods. 
For example, null check, collection sorting, etc
Methods of java.lang.Object can never be defined as static methods in interfaces

The Comparator interface of Java 8 is a perfect example in which the static methods have been included: 
comparingInt(), comparingDouble(), comparingLong(), 
naturalOrder(), nullsFirst(), nullsLast() and reverseOrder()

countrylst.sort(Comparator.naturalOrder()); 

Are static Methods available to implementing classes by default?
Static methods are not available to implementing classes.

Can we use default, static together?
we get the following compile time error.
Illegal combination of modifiers for the interface method staticMethod; 
only one of abstract, default, or static permitted

Ref:
https://www.youtube.com/watch?v=bxtNFqldAuk&list=PLyHJZXNdCXsdeusn4OM33415DCMQ6sUKy&index=2
-------
Lambda Expression in Java 8

The major reason for presenting default methods was to improve the Collections API to have a support for lambda expressions.


lamda  expression is used when a method not being used multiple times.
we don't need to implement the interface, which has the method.
we can create instance of interface, implement method using lamda expression and call the method using object declared.

  B obj; //B interface object is instantiatied 
  obj = () -> System.out.println("Lamda"); // lamda expression
  obj.lamda(); // calling lamda method present in interface'B' using obj.
  
  
Lambda expressions provide implementation logic for functional interfaces (interfaces with only one abstract method).

Lambda expressions add the essence of functional programming in Java. 
They are functional constructs without classes, which can be passed like objects and executed as required. They also make the modifiers, return type, and parameter types completely optional.

 the return type of any lambda expression/anonymous function will be the type of the expression that the body evaluates to.
 ------------
 Functional interface -
lambda expressions provide interface implementations. Therefore, the target type of any lambda expression is Functional Interfaces.
Functional interfaces strictly have abstract methods of count one, 
However, they are allowed to have any number of static or default methods. In addition, they can override some methods from java.lang.Object.

@FunctionalInterface annotation helps designing an interface as a functional interface
Some of the functional interfaces available in Java are as follows:

Functional Interface					Abstract Method
java.awt.event.ActionListener		void actionPerformed(ActionEvent event)
java.beans.PropertyChangeListener	void propertyChange(PropertyChangeEvent evt)
java.io.FileFilter					boolean accept(File filePathname)
java.lang.Runnable					void run()
java.security.PrivilegedAction		T run()
java.util.concurrent.Callable		V call()
java.util.Comparator				int compare(T objectt1, T objectt2)
----------
17.22 New Date Time Api in Java 8

Method Reference in Java 8
method reference:
s -> StringParser.convert(s)
StringParser::convert
Ref: https://www.youtube.com/watch?v=svQKKg3aFzo

ClassName::methodName is same as () -> methodName()
System.out::println is same as p -> System.out.println(p)

method reference is replacement of lambda expression.
it is used to refer method of FunctionalInterface to an existing method. 
mainly used for code reusability.

Ref: https://www.youtube.com/watch?v=lwwIZuwYmNI
https://www.youtube.com/watch?v=oUdENE7ljjw&list=PLyHJZXNdCXsdeusn4OM33415DCMQ6sUKy&index=2
---------
Q) What are predicates? 
Predicate is a predefined Functional Interface (Having only 1 abstract method).
The only abstract method of predicate is test(T t):
public boolean test(T t);
Whenever we want to check some boolean condition then you can go for Predicates. 

Q) How to use Predicates? 
Say if you need to test if the length of the given string is greater than or equal to 5. 
Then in such situations where you need to test conditions, use test() method of predicate.

Q) Type parameter and return types of Predicates?
Input to predicate can be anything like 
Hence only 1 type argument is required which is input type in predicate.
Return type is not required as its always Boolean only.

Q) Advantages of Predicates?
Code Reusability

If you have same conditions being used 100 times in a prgram then 
you can write once and just use 100 times with checkLength.test(different string to be tested).

Conditional checks are holded by Functional interfaces.

Q) What is Predicate joining?
You can combine predicates in serial predicate

Three ways to join :
And
Or
Negate

Eg if you want to test 2 conditions:
To check length of string 
To check if length is even.

Q) What are Functions
Function is also a predefined Functional Interface (Having only 1 abstract method).

The only abstract method of Function is   apply(T t);
R apply(T t);

Given some input perform some operation on input and then produce / return result (not necessary a boolean value).

This takes 1 input and returns one output. 

In predicate we used to take 1 input and return type is always boolean. 
In function return type is not fixed hence we declare both input type and return type.

Ref:
https://www.youtube.com/watch?v=3b8I4rzqF0c&list=PLyHJZXNdCXsdeusn4OM33415DCMQ6sUKy&index=5
------
BiConsumer -

import java.util.function.BiConsumer;

@FunctionalInterface
public interface BiConsumer<T, U> {

FunctionalInterfaces have 
- only one abstract method
- any number of static methods, default methods
- e.g: Comparable, Runnable

Functional Interfaces are used to provide reference to lamba expression.
BiConsumer<Integer,Integer> biConsumer = (a,b) -> System.out.println(a+b);

we can create our own functional interfaces also.

Ref: 
https://www.youtube.com/watch?v=oUdENE7ljjw&list=PLyHJZXNdCXsdeusn4OM33415DCMQ6sUKy&index=2
--------
Predicate, Function, Consumer, Supplier, Streams, Parallerl Streams

Consumer -
What is Consumer Functional interface?
Predicate<T> takes 1 input and returns boolean
Function<T,R> takes 1 input and 1 returnype/output produced after performing some operation on that input

Consumer<T>, 
Consumer :  It will consume Item. Consumers never return anything (never supply), they just consume.
e.g: take any object and save its details in DB and don't return anything.

Interface Consumer<T> {
	public void accept(T t);
}

Consumer Chaining :
We can combine / chain multiple consumers together with andThen .

There is only one ways to combine consumers:
c1.andThen(c2).apply(Input);  - first c1 then c2

No compose() in consumer.

Multiple consumers can be chained together like :
c1.andThen(c2).andThen(c3).andThen(c4).apply(Inputs);


What is Supplier Functional interface?
Supplier :
Supplier<R> -- It will just supply required objects and will not take any input
Its always going to supply never consume / take any input.

e.g : always supply me current date.
Interface Supplier<R> {
	public R get();
}
No chaining as no input is given to this. Only it gives u output.

Advantages:
Write once, use anywhere.
Code Reusability

Use of BiConsumer, BiFunction, BiPredicate and why no BiSupplier?
Predicate<T> -- test() -- return boolean
Function<T,R> -- apply() -- returns anything
Consumer<T> -- accept() -- returns nothing
Supplier<R> -- get() -- returns anything

BiCinsumer Bisupplier :
What if we need 2 arguments for operation?
Then we need Bi XYZ Functional Interfaces.
There is no input in supplier so no 1 or 2 Input arguments needed. Hence no BiSupplier.

If we want to operate on 3 arguments then triPredicate? 
There are no TriPredicate or TriFunction etc.
No QuadPredicate No QuadFunction.
Java 8 has inbuilt Functional interfaces that can take only 1 or 2 arguments no more.


Ref:
https://www.youtube.com/watch?v=7-ALyd6OAaQ&list=PLyHJZXNdCXsdeusn4OM33415DCMQ6sUKy&index=3
----------
Stream:

https://javaconceptoftheday.com/collections-and-streams-in-java/

Streams vs Collections:
- A collection is simply an in-memory data structure that holds all the data, 
whereas Streams are data structures whose elements are computed only when there is a demand.
- A Collection is eagerly constructed, whereas a Stream is lazily constructed based on demand.
- Also, a Collection uses external iteration using iterator or for-loop, where as a Stream uses completely internal iteration.
- Like an iterator in Collection, Stream can be traversed or consumed only once.

1. Java Stream vs Collection
Collection vs Stream
Collection is an in-memory data structure,  Every element in the Collection has to be computed before it can be added to the Collection.
While a Stream is a conceptually a pipeline, in which elements are computed on demand.

Diff b.w streams(java 1.8) vs java.io.Stream?
java 1.8 streams for acting on collection.
java io streams is a sequence of characters or binary data which is used to be written to a file or to read data from a file.


Java 8 Streams 

Terminal Operations:
forEach(), toArray(), reduce(), collect(), min(), max(), count(),
anyMatch(), allMatch(), nonMatch(), findFirst(), findAny()

Intermediate Operations:
filter(), peek(), map(), distinct(), sorted(), limit(), skip()

Short circuit Operators:
	Terminal operators -
		findFirst(), findAny(), anyMatch(), allMatch(), nonMatch()
	Intermediate Operators -
		limit()
		
Collectors -
toList(), toMap(), toSet()
joining()
counting()
summarizingDouble/Long/Int()
averagingDouble/Long/Int()
groupingBy(),partioningBy()

Stream Builder -
accept(), add(), build()

Stream support -
Ling Stream, Double Stream, Int Stream

17.11 Stream API in Java 8 Tutorial
Use of Stream api

Intermediate methods -
filter()
map()

Terminating methods -
findFirst()
forEach()



Terminal Operations :forEach(), toArray(), reduce(), collect(), min(), max(), count(), 
anyMatch(), allMatch(), noneMatch(), findFirst(), findAny()

2. Creating Streams
Stream.of()
Stream<Integer> stream = Stream.of(1,2,3,4,5,6,7,8,9);
stream.forEach(p -> System.out.println(p));

Stream<Integer> stream = Stream.of( new Integer[]{1,2,3,4,5,6,7,8,9} );
stream.forEach(p -> System.out.println(p));

Stream.generate() or Stream.iterate()
Stream<Integer> randomNumbers = Stream.generate(() -> (new Random()).nextInt(100));

List.stream()
List<Integer> list = new ArrayList<Integer>();
Stream<Integer> stream = list.stream();
stream.forEach(p -> System.out.println(p));
     
Stream s = collectionObject.stream();
Once we get stream object we can process the object of collection.
Processing of stream consists of 2 steps/ stages
Configuration of stream
Processing that configuration
Configuration can be done by 
Map 
Filter

Stream s = collectionObject.stream().filter(i -> i % 2 ==0);

What if we don’t want to filter out.
We rather want to create new object against each existing stream object based on some function.

e.g in given stream create new object by squaring  its value

If we want to fetch / filter objects from collection like 
eg : filter only even numbers from array list collection the use Filter for configuration of stream.       
           
If we want to perform some operation on each objects of the collection 
hen create another mapped object with different value(after operation is performed ) 
for each object of that collection, then use map.

In filter, 
because of filtering, number of objects in filtered list is less than original list 
While in Map  same number of objects are there in both new and original list created.
  
Building Streams:
Collections being one of the most intensively used API in Java, Stream support has been added to it by introducing a default stream() method in the Collection interface. Therefore, we can get a stream from a list just as follows:
Stream<Employee> empStream = lstEmp.stream();

From arrays, streams can be built as follows:
String[] emps = {"Jose Jacob", "Robert King", "John Mathew"};
Stream<String> stream = Arrays.stream(emps);

To build streams from files, the java.nio.file.Files class can be used:
String fileName = "C://Employees.txt";
// Reading file into stream inside try-with-resources
try (Stream<String> stream = Files.lines(Paths.get(fileName))) {
    stream.forEach(System.out::println);
} catch (IOException excIO) {
    e.printStackTrace();
}

Streams can also be built simply from values as below:
Stream<String> stream = Stream.of("Jose Jacob", "Robert King", "John Mathew");


process stream:
collect(), count(), sorted(), min(), max(), forEach(), toArray(), of()

collect()
List<Integer> list2 = list.stream().map(i -> { if(i%2==0) return i/2; else  return i*2;}).collect(Collectors.toList());

count()
System.out.println(list.stream().filter(i -> i%2==0).count());

sorted()
list2.stream().sorted().forEach(System.out::println); - ascending order

sorted()
if we want to sort in descending order, then we can use Comparator.
list2.stream().sorted((i1,i2)->i2.compareTo(i1)).forEach(System.out::println);

max()
System.out.println(list2.stream().max((i1,i2)->i1.compareTo(i2)).get());

min()
System.out.println(list2.stream().min((i1,i2)->i1.compareTo(i2)).get());
 
toArray()
we can use this method to copy elements present in the stream to specified array.
Object[] array = list2.stream().sorted((i1,i2)->i2.compareTo(i1)).toArray();

of()
Stream.of(), this method can take any group of values  and convert them to Stream.
Stream<Serializable> streamCreated = Stream.of(1,"pavan",2,"kari",'h','i',true);

limit() - 
Returns a stream consisting of the elements of this stream, 
truncated to be no longer than maxSize in length.

skip() -
Returns a stream consisting of the remaining elements of this stream 
after discarding the first n elements of the stream. 
If this stream contains fewer than n elements then an empty stream will be returned.
-----
parallel stream:
to use multiple cores of processor
Order of execution not in control,
hence advisable to use parallel stream only when order of executio of threads doesn't matter
and state of one element doesn't affect another
---
 Filtering Streams:
##Filtering
for (Employee emp : lstEmp) {
            if (emp.getYearsInOrg() < 1) {   
                listNewEmp.add(emp);
            }
        }
        
lstEmp.forEach((e) -> { if(e.getYearsInOrg() < 1)  
            lstNewEmp.add(e);
        });
        

Stream<Employee> empStream = lstEmp.stream();
Stream<Employee> newEmpStream = empStream.filter(emp -> emp.getYearsInOrg() < 1);
Stream<T> filter(Predicate<? super T> predicate);

-----------
Sorting Streams:
#logic for sorting
Collections.sort(listNewEmp, new Comparator<Employee>() {    
                public int compare(Employee employee1, Employee employee2) {
                return employee1.getId() - employee2.getId();
            }
        });
        
lstNewEmp.sort((employee1,employee2) -> employee1.getId() - employee2.getId());


Stream<Employee> empStream = lstEmp.stream();
Stream<Employee> newEmpStream = empStream.filter(emp -> emp.getYearsInOrg() < 1);
Stream<Employee> sortedEmpStream = newEmpStream.sorted((e1, e2) -> e1.getId() - e2.getId());
Stream<T> sorted(Comparator<? super T> comparator);

Stream<Employee> sortedEmpStream = lstEmp.stream()
    .filter(emp -> emp.getYearsInOrg() < 1)
    .sorted((e1, e2) -> e1.getId() - e2.getId());
    
  
java.util.stream.Collectors
List<Integer> sortedList = list.stream().sorted().collect(Collectors.toList());


#for reverse order 
List<String> sortedList = list.stream()
        .sorted(Collections.reverseOrder())
        .collect(Collectors.toList());
 
 
Sorting Custom Objects with Stream.sorted(Comparator<? super T> comparator)       
#sorting objects based on property values
List<User> sortedList = userList.stream()
        .sorted(Comparator.comparingInt(User::getAge))
        .collect(Collectors.toList());
        
We can easily reverse this order as well, simply by chaining the reversed() method after the comparingInt() call:
List<User> sortedList = userList.stream()
        .sorted(Comparator.comparingInt(User::getAge).reversed())
        .collect(Collectors.toList());
        
 #custom Comparator
List<User> sortedList = userList.stream()
        .sorted((o1, o2) -> {
            if(o1.getAge() == o2.getAge())
                return o1.getName().compareTo(o2.getName());
            else if(o1.getAge() > o2.getAge())
                return 1;
            else return -1;
        })
        .collect(Collectors.toList());
       
-------
#content display
for (Employee newEmp : listNewEmp) {
            System.out.println(newEmp.getId() + ":" + newEmp.getName());
        }
        
lstNewEmp.forEach((e) -> System.out.println(e.getId() + ":" + e.getName()));    // Displaying
----------
## filtering, sorting and printing done in single line of code bcz of streams
lstEmp.stream().filter(emp -> emp.getYearsInOrg() < 1)
        .sorted((e1, e2) -> e1.getId() - e2.getId())
        .forEach((e) -> System.out.println(e.getId() + ":" + e.getName()));
-----------
List<String> list = new ArrayList<>();
list.add() - add names to list
find names starting with a letter
http://www.java2s.com/Tutorials/Java/Stream_How_to/Stream_Filter/Filter_String_value_with_starting_letter.htm
Stream<String> s = names.stream().filter(name -> name.startsWith("C"));

https://www.technicalkeeda.com/java-8-tutorials/java-8-stream-count
long count = colours.stream().filter(predicate).count();
--------
list contains N no of duplicate elements, remove duplicate elements without using set or map
List<Interger> list = new ArrayList<>();
https://howtodoinjava.com/java8/java-stream-distinct-examples/
-----
using streams to iterate over a collection 
an employee list given, employee[name, salary,id]
find employees with salary greater than 50k, and unique names
https://stackoverflow.com/questions/29670116/remove-duplicates-from-a-list-of-objects-based-on-property-in-java-8
https://howtodoinjava.com/java8/java-stream-distinct-examples/
--------
Diff operations types in Stream
The terminal operations return a result of a certain type and 
intermediate operations return the stream itself so we can chain multiple methods in a row to perform the operation in multiple steps.

Streas work on which Data structure 
Streams are created on a source, e.g. a java.util.Collection like List or Set. 
The Map is not supported directly, we can create stream of map keys, values or entries.

Stream operations can either be executed sequentially or parallel. 
when performed parallelly, it is called a parallel stream.

Based on the above points, if we list down the various characteristics of Stream, they will be as follows:
Not a data structure
Designed for lambdas
Do not support indexed access
Can easily be aggregated as arrays or lists
Lazy access supported
Parallelizable



3. Stream Collectors

4. Stream Operations

5. Stream Short-circuit Operations

6. Parallelism in Java Steam

   
        
        
Ref:
https://www.youtube.com/watch?v=J-RTlluJv7E&list=PLyHJZXNdCXsdeusn4OM33415DCMQ6sUKy
https://www.youtube.com/watch?v=cqQN8g4oR98&list=PLyHJZXNdCXsdeusn4OM33415DCMQ6sUKy&index=6
https://www.youtube.com/watch?v=0bHCxjkku0s
https://lex.infosysapps.com/en/viewer/web-module/lex_28368141434068914000?collectionId=lex_25529606976739830000&collectionType=Course
https://javaconceptoftheday.com/java-8-stream-intermediate-and-terminal-operations/
https://stackabuse.com/java-8-how-to-sort-list-with-stream-sorted/
https://howtodoinjava.com/java8/java-streams-by-examples/
https://howtodoinjava.com/java/collections/arraylist/remove-duplicate-elements/
https://howtodoinjava.com/java8/java-stream-distinct-examples/
-----

Optional class - 
To create an empty Optional object, we simply need to use its empty() static method:
Optional<String> empty = Optional.empty();

Optional object with the static method of():
String name = "baeldung";
Optional<String> opt = Optional.of(name);
However, the argument passed to the of() method can't be null. Otherwise, we'll get a NullPointerException:

in case we expect some null values, we can use the ofNullable() method:
Optional<String> opt = Optional.ofNullable(name);
if we pass in a null reference, it doesn't throw an exception but rather returns an empty Optional object.

empty.isPresent()
opt.isEmpty()

Optional<String> opt = Optional.of("baeldung");
opt.ifPresent(name -> System.out.println(name.length()));

String nullName = null;
String name = Optional.ofNullable(nullName).orElse("john");

String nullName = null;
String name = Optional.ofNullable(nullName).orElseGet(() -> "john");

https://www.baeldung.com/java-optional
https://www.oracle.com/technical-resources/articles/java/java8-optional.html
https://www.geeksforgeeks.org/java-8-optional-class/#:~:text=Java%208%20has%20introduced%20a,or%20alternate%20code%20to%20run.
------
forEach() is a default method in the List interface whose inclusion does not force the existing implementations like ArrayList to be modified.

functional programming vs oops
https://www.youtube.com/watch?v=cwV1ekXSMV0
-------
#find no.of occurrences of all characters in a string
HashMap<Character,Integer> hm = new HashMap();
        
        for(int i=0;i<str.length();i++){
            if(hm.containsKey(str.charAt(i)))
                hm.put(str.charAt(i),hm.get(str.charAt(i))+1);
            else
                hm.put(str.charAt(i),1);
        }
        
https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html
https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html
----
finding occurance of known character
long count = someString.chars().filter(ch -> ch == 'e').count();
----
map()
flatMap()

intermediate methods
map() - used for transformation
flatMap() - used for transformation & flattering

flatMap() = map() + flattering

<R> Stream<R> map(Function<? super T, ? extends R> mapper);
map() takes Stream<T> as input, return Stream<R>
One-to-One mapping

<R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper);
takes Stream<Stream<T>> as input, return Stream<R>
it's mapper function produces multiple value for each input value.
hence it's also called One-to-Many Mapping

transformation is updating data from one value to another value
flattering is converting stream into single stream


https://www.youtube.com/watch?v=CwvlS3ViGFQ
---------
